#!/usr/bin/env node

// Connect the MongoDB database via Mongoose
const mongoose = require('mongoose');
const uri ='mongodb+srv://HyperionDev:swordfish@hyperion-dev-project.xj47sjg.mongodb.net/cooltech?retryWrites=true&w=majority';

mongoose.Promise = global.Promise;

mongoose.connect(uri, { useNewUrlParser: true, useUnifiedTopology:true});

mongoose.connection.on('error', function() {
  console.log('Connection to Mongo established.');
  console.log('Could not connect to the database. Exiting now...');
  process.exit();
});

mongoose.connection.once('open', function() {
  console.log("Successfully connected to the database");
})

/**
 * Module dependencies.
 */

let app = require('../app');
let debug = require('debug')('cooltech:server');
let http = require('http');

/**
 * Get PORT from environment and store in Express.
 */

let PORT = normalizePORT(process.env.PORT || '3001');
app.set('PORT', PORT);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);

/**
 * Listen on provided PORT, on all network interfaces.
 */

server.listen(PORT);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a PORT into a number, string, or false.
 */

function normalizePORT(val) {
  let PORT = parseInt(val, 10);

  if (isNaN(PORT)) {
    // named pipe
    return val;
  }

  if (PORT >= 0) {
    // PORT number
    return PORT;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof PORT === 'string'
    ? 'Pipe ' + PORT
    : 'PORT ' + PORT;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'PORT ' + addr.PORT;
  debug('Listening on ' + bind);
}
